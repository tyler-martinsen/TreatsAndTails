@using FluentValidation;
@using TreatsAndTails.Models;
@using TreatsAndTails.Components.Services;
@inject UserService UserService
@inject NavigationManager NavigationManager

@page "/register"

<PageTitle>Register</PageTitle>

<MudCard>
	<MudForm Model="@user" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
		<MudCardContent>
			<h1>Register</h1>
			<MudTextField @bind-Value="user.Email"
						  For="@(() => user.Email)"
						  Immediate="true"
						  Label="Email" />
			<MudTextField @bind-Value="user.Password"
						  For="@(() => user.Password)"
						  Immediate="true"
						  Label="Password"
						  Variant="Variant.Filled"
						  InputType="@PasswordInput"
						  Adornment="Adornment.End"
						  AdornmentIcon="@PasswordInputIcon"
						  OnAdornmentClick="ButtonTestclick"
						  AdornmentAriaLabel="Show Password" />
			<MudTextField @bind-Value="user.PasswordConfirmed"
						  For="@(() => user.PasswordConfirmed)"
						  Immediate="true"
						  Label="Confirm Password"
						  Variant="Variant.Filled"
						  InputType="@PasswordInput"
						  Adornment="Adornment.End"
						  AdornmentIcon="@PasswordInputIcon"
						  OnAdornmentClick="ButtonTestclick"
						  AdornmentAriaLabel="Show Password" />
			<MudTextField @bind-Value="user.FirstName"
						  For="@(() => user.FirstName)"
						  Immediate="true"
						  Label="First Name" />
			<MudTextField @bind-Value="user.LastName"
						  For="@(() => user.LastName)"
						  Immediate="true"
						  Label="Last Name" />
			<MudTextField @bind-Value="user.PhoneNumber"
						  For="@(() => user.PhoneNumber)"
						  Immediate="true"
						  Label="Phone Number"
						  Mask="@(new PatternMask("(000)000-0000"))" />
		</MudCardContent>
	</MudForm>
	<MudCardActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Register</MudButton>
	</MudCardActions>
</MudCard>

@code {
	[Inject] ISnackbar Snackbar { get; set; }

	MudForm form;

	UserFluentValidator orderValidator = new UserFluentValidator();

	_User user = new _User();

	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	void ButtonTestclick()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	private async Task Submit()
	{
		await form.Validate();

		if (form.IsValid)
		{
			if (await UserService.AddUserAsync(user))
			{
				ShowRegisteredMessage();
			}
		}
	}

	private void ShowRegisteredMessage(string message = "User has been registered!")
	{
		this.Snackbar.Clear();
		this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
		this.Snackbar.Add(message, MudBlazor.Severity.Success);
	}

	/// <summary>
	/// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
	/// </summary>
	/// <typeparam name="User"></typeparam>
	public class UserFluentValidator : AbstractValidator<_User>
	{
		public UserFluentValidator()
		{
			RuleFor(x => x.Email)
				.Cascade(CascadeMode.Stop)
				.NotEmpty()
				.EmailAddress()
				.MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

			RuleFor(user => user.Password)
				.NotEmpty().WithMessage("Password is required.")
				.MinimumLength(8).WithMessage("Password must be at least 8 characters long.")
				.Matches("[A-Z]").WithMessage("Password must contain at least one uppercase letter.")
				.Matches("[a-z]").WithMessage("Password must contain at least one lowercase letter.")
				.Matches("[0-9]").WithMessage("Password must contain at least one numeric digit.")
				.Matches("[^a-zA-Z0-9]").WithMessage("Password must contain at least one special character.");

			RuleFor(user => user.PasswordConfirmed)
				.NotEmpty().WithMessage("Password confirmation is required.")
				.Equal(user => user.Password).WithMessage("Password confirmation does not match the password.");

			RuleFor(x => x.FirstName)
				.NotEmpty()
				.Length(1, 100);

			RuleFor(x => x.LastName)
				.NotEmpty()
				.Length(1, 100);

			RuleFor(x => x.PhoneNumber)
				.NotEmpty().WithMessage("Phone number is required.")
				.Matches(@"^\(\d{3}\)\d{3}-\d{4}$").WithMessage("Invalid phone number format. Please use the format (123)456-789");
		}

		private async Task<bool> IsUniqueAsync(string email)
		{
			// Simulates a long running http call
			await Task.Delay(2000);
			return email.ToLower() != "test@test.com";
		}

		public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
		{
			var result = await ValidateAsync(ValidationContext<_User>.CreateWithOptions((_User)model, x => x.IncludeProperties(propertyName)));
			if (result.IsValid)
				return Array.Empty<string>();
			return result.Errors.Select(e => e.ErrorMessage);
		};
	}
}