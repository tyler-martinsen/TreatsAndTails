@using System.Text.Json
@using System.Text.Json.Serialization
@using TreatsAndTails.Components
@using TreatsAndTails.Components.Services
@using TreatsAndTails.Components.Pages
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TreatsAndTails.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@inject UserService UserService
@inject ISnackbar Snackbar

<PageTitle>Login/Register</PageTitle>

<MudCard>
	<MudCardContent>
		<MudForm>
			<h1>Login</h1>
			<MudTextField Label="Email" @bind-Value="username" />
			<MudTextField Label="Password"
						  Type="Password"
						  @bind-Value="password"
						  Variant="Variant.Filled"
						  InputType="@PasswordInput"
						  Adornment="Adornment.End"
						  AdornmentIcon="@PasswordInputIcon"
						  OnAdornmentClick="ButtonHidePassword"
						  AdornmentAriaLabel="Show Password" />
		</MudForm>
	</MudCardContent>
	<MudCardActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await SubmitForm())">Login</MudButton>
	</MudCardActions>
</MudCard>


@code {
	bool isShow;
	InputType PasswordInput = InputType.Password;
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

	string? email = null;

	private string? username;
	private string? password;

	void ButtonHidePassword()
	{
		@if (isShow)
		{
			isShow = false;
			PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
			PasswordInput = InputType.Password;
		}
		else
		{
			isShow = true;
			PasswordInputIcon = Icons.Material.Filled.Visibility;
			PasswordInput = InputType.Text;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var authStateJson = (await ProtectedSessionStore.GetAsync<string?>("AuthState")).Value;
			if (authStateJson != null)
			{
				var authState = JsonSerializer.Deserialize<AuthenticationState>(authStateJson);

				if (authState != null)
				{
					((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationState(authState);
					StateHasChanged();
				}
			}
		}
	}

	private async Task AuthenticateUser(string? _username, string? _password)
	{
		if (_username != null && _password != null)
		{
			// Perform authentication logic here
			var userAuthenticated = await UserService.AuthenticateUser(_username, _password);

			if (userAuthenticated)
			{
				var identity = new ClaimsIdentity(new[]
				{
					new Claim(ClaimTypes.Name, _username),
				}, "custom");

				var user = new ClaimsPrincipal(identity);

				var authState = new AuthenticationState(user);

				try
				{
					// Set authentication state
					await ProtectedSessionStore.SetAsync("username", _username);
					((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationState(authState);
					StateHasChanged();
				}
				catch (Exception ex)
				{
					ShowFailedLoginMessage();
					return;
				}

				var key = await UserService.GetKey(_username);

				if (key == null)
				{
					ShowFailedLoginMessage();
				}
			}
			else
			{
				// Handle invalid login
				ShowFailedLoginMessage();
			}
		}
	}

	private void ShowFailedLoginMessage(string message = "Incorrect Username or Password")
	{
		this.Snackbar.Clear();
		this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
		this.Snackbar.Add(message, Severity.Error);
	}

	private async Task SubmitForm()
	{
		await AuthenticateUser(username, password);
		password = "";
	}
}