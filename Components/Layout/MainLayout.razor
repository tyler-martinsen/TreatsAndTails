@using System.Text.Json
@using System.Text.Json.Serialization
@using TreatsAndTails.Components
@using TreatsAndTails.Components.Services
@using TreatsAndTails.Components.Pages
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TreatsAndTails.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inherits LayoutComponentBase
@inject UserService UserService
@inject ISnackbar Snackbar

<MyMudThemeProvider _IsDarkMode="@isDarkMode"></MyMudThemeProvider>

<MudSnackbarProvider></MudSnackbarProvider>

<MudLayout>
	<MudAppBar Elevation="1" Dense="@dense">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
		<MudSpacer />
		<MudSwitch ValueChanged="@ToggleDarkmode" id="DarkModeSwitch" Color="Color.Primary" T="bool" Label="Toggle Light/Dark Mode" />
	</MudAppBar>
	<MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
		<MudDrawerHeader>
			<MudImage Fluid="true" Src="images/branding/icon3.png" Alt="Icon" Class="rounded-lg" />
		</MudDrawerHeader>
		<NavMenu></NavMenu>
	</MudDrawer>
	<MudMainContent>
		<CascadingAuthenticationState>
			<AuthorizeView>
				<Authorized>
					@Body
				</Authorized>
				<NotAuthorized>
					<MudContainer MaxWidth="MaxWidth.Small" Class="my-2 pt-2">
						<Login></Login>
						<MudDivider DividerType="DividerType.Middle" Class="my-6" />
						<Register></Register>
					</MudContainer>
				</NotAuthorized>
			</AuthorizeView>
		</CascadingAuthenticationState>
	</MudMainContent>
</MudLayout>


@code {
	bool open { get; set; } = true;
	bool dense { get; set; } = false;
	public bool isDarkMode { get; set; }

	DrawerClipMode clipMode = DrawerClipMode.Never;

	string username { get; set; } = "";

	private void ToggleDrawer()
	{
		open = !open;
	}

	private async void ToggleDarkmode()
	{
		isDarkMode = !isDarkMode;

		if (!string.IsNullOrEmpty(username))
		{
			await UserService.SetDarkmodeAsync(username, isDarkMode);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var username = (await ProtectedSessionStore.GetAsync<string?>("username")).Value;
			if (username != null)
			{
				var identity = new ClaimsIdentity(new[]
				{
					new Claim(ClaimTypes.Name, username),
				}, "custom");

				var user = new ClaimsPrincipal(identity);

				var authState = new AuthenticationState(user);

				try
				{
					// Set authentication state
					await ProtectedSessionStore.SetAsync("username", username);
					((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationState(authState);
					StateHasChanged();
				}
				catch (Exception ex)
				{
					return;
				}
			}
		}
	}
}
