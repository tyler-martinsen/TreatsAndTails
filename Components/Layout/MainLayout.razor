@using TreatsAndTails.Components
@using TreatsAndTails.Components.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using TreatsAndTails.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@inject UserService UserService
@inject AesService AesService
@inject ISnackbar Snackbar

<MyMudThemeProvider _IsDarkMode="@IsDarkMode"></MyMudThemeProvider>

<MudSnackbarProvider></MudSnackbarProvider>

<MudLayout>
	<MudAppBar Elevation="1" Dense="@dense">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
		<MudSpacer />
		<MudSwitch ValueChanged="@ToggleDarkmode" id="DarkModeSwitch" Color="Color.Primary" T="bool" Label="Toggle Light/Dark Mode" />
	</MudAppBar>
	<MudDrawer @bind-Open="@open" ClipMode="clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
		<MudDrawerHeader>
			<MudImage Fluid="true" Src="images/branding/icon3.png" Alt="Icon" Class="rounded-lg" />
		</MudDrawerHeader>
		<MudNavMenu>
			<MudNavLink Match="NavLinkMatch.All" Href="/">Home</MudNavLink>
			<MudNavLink Match="NavLinkMatch.All" Href="/login">Login</MudNavLink>
			<MudNavLink Match="NavLinkMatch.All" Href="/register">Register</MudNavLink>
		</MudNavMenu>
	</MudDrawer>
	<MudMainContent>
		<CascadingAuthenticationState>
			<AuthorizeView>
				<Authorized>
					@Body
				</Authorized>
				<NotAuthorized>
					<MudContainer MaxWidth="MaxWidth.Small" Class="my-2 pt-2">
						<MudCard>
							<MudCardContent>
								<MudForm>
									<h1>Login</h1>
									<MudTextField Label="Username" @bind-Value="username" />
									<MudTextField Label="Password" Type="Password" @bind-Value="password" />
									<MudButton Type="Submit" OnClick="(() => SubmitForm())">Login</MudButton>
								</MudForm>
							</MudCardContent>
						</MudCard>
					</MudContainer>
				</NotAuthorized>
			</AuthorizeView>
		</CascadingAuthenticationState>
	</MudMainContent>
</MudLayout>


@code {
	bool open { get; set; } = true;
	bool dense { get; set; } = false;
	public bool IsDarkMode { get; set; }
	string? email = null;

	private string? username;
	private string? password;

	DrawerClipMode clipMode = DrawerClipMode.Never;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			username = (await ProtectedSessionStore.GetAsync<string>("username")).Value ?? username;
			password = (await ProtectedSessionStore.GetAsync<string>("password")).Value ?? password;
			await AuthenticateUser(username, password, true);
		}
	}

	void ToggleDrawer()
	{
		open = !open;
	}

	async void ToggleDarkmode()
	{
		IsDarkMode = !IsDarkMode;
		await UserService.SetDarkmodeAsync(email, IsDarkMode);
	}

	private async Task AuthenticateUser(string? _username, string? _password, bool isEncrypted = false)
	{
		if (_username != null && _password != null)
		{
			// Perform authentication logic here
			var userAuthenticated = false;

			if (userAuthenticated)
			{
				var identity = new ClaimsIdentity(new[]
				{
				new Claim(ClaimTypes.Name, _username),
			}, "custom");

				var user = new ClaimsPrincipal(identity);

				var authState = new AuthenticationState(user);

				var key = await AesService.GetKey(_username);

				if (key == null)
				{
					ShowFailedLoginMessage();
				}
				else
				{
					// Store Auth State
					await ProtectedSessionStore.SetAsync("username", _username);
					await ProtectedSessionStore.SetAsync("password", AesService.Encrypt(key, _password));

					// In a Blazor Server app, use the following code to set the authentication state
					((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetAuthenticationState(authState);
					StateHasChanged();
				}
			}
			else
			{
				// Handle invalid login
				ShowFailedLoginMessage();
			}
		}
	}

	private void ShowFailedLoginMessage()
	{
		this.Snackbar.Clear();
		this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
		this.Snackbar.Add("Incorrect Username or Password", Severity.Error);
	}

	private async Task SubmitForm()
	{
		await AuthenticateUser(username, password);
	}
}
